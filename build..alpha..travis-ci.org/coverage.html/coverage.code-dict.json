{"/home/travis/build/npmtest/node-npmtest-i18n-abide/test.js":"/* istanbul instrument in package npmtest_i18n_abide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-abide/lib.npmtest_i18n_abide.js":"/* istanbul instrument in package npmtest_i18n_abide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_i18n_abide = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_i18n_abide = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-abide/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-i18n-abide && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_i18n_abide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_i18n_abide\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_i18n_abide.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_i18n_abide.rollup.js'] =\n            local.assetsDict['/assets.npmtest_i18n_abide.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_i18n_abide.__dirname + '/lib.npmtest_i18n_abide.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-abide/node_modules/i18n-abide/lib/i18n.js":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/*\n * i18n-abide\n *\n * This module abides by the user's language preferences and makes it\n * available throughout the app.\n *\n * This module abides by the Mozilla L10n way of doing things.\n *\n * The module abides.\n *\n * See docs/I18N.md for details.\n */\n\nvar fs = require('fs'),\n    gobbledygook = require('gobbledygook'),\n    path = require('path'),\n    util = require('util'),\n    plist = require('plist');\n\nconst DAVID_B_LABYRN = 'db-LB';\nconst BIDI_RTL_LANGS = ['ar', DAVID_B_LABYRN, 'fa', 'he'];\n\n// Number of characters before and after valid JSON in messages.json files\nconst JS_PRE_LEN = 24;\nconst JS_POST_LEN = 3;\n\nvar translations = {};\nvar logger;\n\n// forward references\nvar localeFrom, parseAcceptLanguage, bestLanguage, format, languageFrom, normalizeLocale;\n\n/**\n * Connect middleware which is i18n aware.\n *\n * Usage:\n  app.use(i18n.abide({\n    supported_languages: ['en-US', 'fr', 'pl'],\n    default_lang: 'en-US',\n    translation_directory: 'locale'\n  }));\n *\n * Other valid options: gettext_alias, debug_lang, disable_locale_check,\n * translation_type, locale_on_url, or logger\n */\nexports.abide = function(options) {\n  options = options || {};\n\n  if (! options.gettext_alias)         options.gettext_alias = 'gettext';\n  if (! options.supported_languages)   options.supported_languages = ['en-US'];\n  if (! options.default_lang)          options.default_lang = 'en-US';\n  if (! options.debug_lang)            options.debug_lang = 'it-CH';\n  if (! options.disable_locale_check)  options.disable_locale_check = false;\n  if (! options.translation_directory) options.translation_directory = 'l18n/';\n  if (! options.logger)                options.logger = console;\n\n  // We expect to use PO->json files, unless configured to use another format.\n  options.translation_type = options.translation_type || 'po';\n  // Only check URL for locale if told to do so.\n  options.locale_on_url = options.locale_on_url === true;\n\n  logger = options.logger;\n\n  function messages_file_path(locale) {\n    // check if the option is 'key-value-json' if so the file format would be 'json' instead\n    var file_format = options.translation_type === 'plist' ? 'plist' : 'json';\n    var filename = 'messages.' + file_format;\n    return path.resolve(path.join(__dirname, '..', '..', '..'),\n                        options.translation_directory,\n                        path.join(locale, filename));\n  }\n\n  function parse_messages_file(locale) {\n    var filepath = messages_file_path(locale);\n\n    if (options.translation_type === 'plist') {\n      return plist.parseFileSync(filepath);\n    }\n    else if (options.translation_type === 'key-value-json') {\n      return require(filepath);\n    }\n    // PO->json file\n    else {\n      var rawMessages = fs.readFileSync(filepath).toString();\n      return JSON.parse(rawMessages).messages;\n    }\n  }\n\n  options.supported_languages.forEach(function(lang) {\n    var l = localeFrom(lang);\n\n    // populate the in-memory translation cache with client.json, which contains\n    // strings relevant on the server\n    try {\n      translations[l] = parse_messages_file(l);\n    } catch (e) {\n      // an exception here means that there was a problem with the translation\n      // files for this locale!\n      if (options.default_lang === lang || options.debug_lang === lang) return;\n\n      var msg = util.format(\n        'Bad locale=[%s] missing .%s files in [%s]. See locale/README (%s)',\n        l, options.translation_type, messages_file_path(l), e);\n      if (!options.disable_locale_check) {\n        logger.warn(msg);\n      } else {\n        logger.error(msg);\n        throw msg;\n      }\n    }\n  });\n\n  function checkUrlLocale(req) {\n    if (!options.locale_on_url) {\n      return;\n    }\n\n    // Given a URL, http://foo.com/ab/xyz/, we check to see if the first directory\n    // is actually a locale we know about, and if so, we strip it out of the URL\n    // (i.e., URL becomes http://foo.com/xyz/) and store that locale info on the\n    // request's accept-header.\n    var matches = req.url.match(/^\\/([^\\/]+)(\\/|$)/);\n    if (!(matches && matches[1])) {\n      return;\n    }\n\n    // Look for a lang we know about, and if found, strip it off the URL so routes\n    // continue to work. If we don't find it (i.e., comes back \"unknown\") then bail.\n    // We do this so that we don't falsely consume more of the URL than we should\n    // and stip things that aren't actually locales we know about.\n    var lang = bestLanguage(parseAcceptLanguage(matches[1]),\n                            options.supported_languages,\n                            \"unknown\");\n    if (lang === \"unknown\") {\n      return;\n    }\n\n    req.url = req.url.replace(matches[0], '/');\n    req.headers['accept-language'] = lang;\n  }\n\n  return function(req, resp, next) {\n    checkUrlLocale(req);\n\n    var langs = parseAcceptLanguage(req.headers['accept-language']),\n        lang_dir,\n        lang = bestLanguage(langs, options.supported_languages,\n                            options.default_lang),\n        debug_lang = options.debug_lang.toLowerCase(),\n        locale,\n        locals = {},\n        gt;\n\n    if (lang && lang.toLowerCase && lang.toLowerCase() === debug_lang) {\n      // What? http://www.youtube.com/watch?v=rJLnGjhPT1Q\n      lang = DAVID_B_LABYRN;\n    }\n    // Express 2 support\n    if (!! resp.local) {\n      resp.locals = function(args, orValue) {\n        if ('string' === typeof args) {\n          resp.local(args, orValue);\n        } else {\n          Object.keys(args).forEach(function(key) {\n            resp.local(key, args[key]);\n          });\n        }\n      };\n    }\n\n    locals.lang = lang;\n\n    // BIDI support, which direction does text flow?\n    lang_dir = BIDI_RTL_LANGS.indexOf(lang) >= 0 ? 'rtl' : 'ltr';\n    locals.lang_dir = lang_dir;\n    req.lang = lang;\n\n    locale = localeFrom(lang);\n\n    locals.locale = locale;\n    req.locale = locale;\n\n    var formatFnName = 'format';\n    if (!! locals.format || !! req.format) {\n      if (!! options.format_fn_name) {\n        formatFnName = options.format_fn_name;\n      } else {\n        console.error(\"It appears you are using middleware which \" +\n          \"already sets a variable 'format' on either the request \" +\n          \"or reponse. Please use format_fn_name in options to \" +\n          \"override this setting.\");\n        throw new Error(\"Bad Config - override format_fn_name\");\n      }\n\n    }\n    locals[formatFnName] = format;\n    req[formatFnName] = format;\n\n    locals.setLocale = function(assignedLocale) {\n      var assignedLang = languageFrom(assignedLocale);\n      if (translations[assignedLocale] || assignedLang === options.default_lang) {\n        locale = assignedLocale;\n\n        var newLocals = {};\n\n        newLocals.locale = assignedLocale;\n        req.locale = assignedLocale;\n\n        newLocals.lang = assignedLang;\n        req.lang = newLocals.lang;\n\n        newLocals.lang_dir = BIDI_RTL_LANGS.indexOf(newLocals.lang) >= 0 ? 'rtl' : 'ltr';\n        req.lang_dir = newLocals.lang_dir;\n\n        if (typeof resp.locals === 'function') {\n          resp.locals(newLocals);\n        } else {\n          Object.keys(newLocals).forEach(function(k) {\n            resp.locals[k] = newLocals[k];\n          });\n        }\n      }\n    };\n    req.setLocale = locals.setLocale;\n\n    if (lang.toLowerCase() === DAVID_B_LABYRN.toLowerCase()) {\n      gt = gobbledygook;\n      locals.lang = DAVID_B_LABYRN;\n    } else {\n      gt = function(sid) {\n        // default lang in a non gettext environment... fake it\n        if (!translations[locale]) {\n          return sid;\n        }\n\n        // The plist and PO->json files are in a slightly different format.\n        if (options.translation_type === 'plist' || options.translation_type === 'key-value-json') {\n          if (translations[locale][sid] && translations[locale][sid].length) {\n            return translations[locale][sid];\n          } else {\n            // Return the default lang's string if missing in the translation.\n            return (translations[options.default_lang][sid] || sid);\n          }\n        }\n        // PO->json file\n        else {\n          if (translations[locale][sid] && translations[locale][sid][1].length) {\n            return translations[locale][sid][1];\n          }\n        }\n        return sid;\n      };\n    }\n    locals[options.gettext_alias] =  gt;\n    req.gettext = gt;\n\n    // resp.locals(string, value) doesn't seem to work with EJS\n    // issue #68; check if resp.locals is a function or object resp. express 3 and express 4\n    typeof resp.locals === 'function' ? resp.locals(locals) : resp.locals = locals;\n\n    next();\n  };\n};\n\nfunction qualityCmp(a, b) {\n  if (a.quality === b.quality) {\n    return 0;\n  } else if (a.quality < b.quality) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * Parses the HTTP accept-language header and returns a\n * sorted array of objects. Example object:\n * {\n *   lang: 'pl', quality: 0.7\n * }\n */\nexports.parseAcceptLanguage = parseAcceptLanguage = function(header) {\n  // pl,fr-FR;q=0.3,en-US;q=0.1\n  if (! header || ! header.split) {\n    return [];\n  }\n  var raw_langs = header.split(',');\n  var langs = raw_langs.map(function(raw_lang) {\n    var parts = raw_lang.split(';');\n    var q = 1;\n    if (parts.length > 1 && parts[1].indexOf('q=') === 0) {\n      var qval = parseFloat(parts[1].split('=')[1]);\n      if (isNaN(qval) === false) {\n        q = qval;\n      }\n    }\n    return { lang: parts[0].trim(), quality: q };\n  });\n  langs.sort(qualityCmp);\n  return langs;\n};\n\n\n // Given the user's prefered languages and a list of currently\n // supported languages, returns the best match or a default language.\n //\n // languages must be a sorted list, the first match is returned.\nexports.bestLanguage = bestLanguage = function(languages, supported_languages, defaultLanguage) {\n  var lower = supported_languages.map(function(l) { return l.toLowerCase(); });\n  for(var i=0; i < languages.length; i++) {\n    var lq = languages[i];\n    if (lower.indexOf(lq.lang.toLowerCase()) !== -1) {\n      return lq.lang;\n    // Issue#1128 match locale, even if region isn't supported\n    } else if (lower.indexOf(lq.lang.split('-')[0].toLowerCase()) !== -1) {\n      return lq.lang.split('-')[0];\n    }\n  }\n  return defaultLanguage;\n};\n\n/**\n * Given a language code, return a locale code the OS understands.\n *\n * language: en-US\n * locale:   en_US\n */\nexports.localeFrom = localeFrom = function(language) {\n  if (! language || ! language.split) {\n    return \"\";\n  }\n  var parts = language.split('-');\n  var pt2;\n  if (parts.length === 1) {\n    return parts[0].toLowerCase();\n  } else if (parts.length === 2) {\n    pt2 = parts[1];\n    pt2 = (pt2.length > 2) ? pt2[0].toUpperCase() + pt2.slice(1).toLowerCase() : pt2.toUpperCase();\n    return util.format('%s_%s', parts[0].toLowerCase(), pt2);\n  } else if (parts.length === 3) {\n    // sr-Cyrl-RS should be sr_RS\n    return util.format('%s_%s', parts[0].toLowerCase(), parts[2].toUpperCase());\n  } else {\n    logger.error(\n      util.format(\"Unable to map a local from language code [%s]\", language));\n    return language;\n  }\n};\n\n/**\n * Given a locale code, return a language code\n */\nexports.languageFrom = languageFrom = function(locale) {\n  if (!locale || !locale.split) {\n    return \"\";\n  }\n  var parts = locale.split('_');\n  var pt2;\n  if (parts.length === 1) {\n    return parts[0].toLowerCase();\n  } else if (parts.length === 2) {\n    pt2 = parts[1];\n    pt2 = (pt2.length > 2) ? pt2[0].toUpperCase() + pt2.slice(1).toLowerCase() : pt2.toUpperCase();\n    return util.format('%s-%s', parts[0].toLowerCase(), pt2);\n  } else if (parts.length === 3) {\n    // sr_RS should be sr-RS\n    return util.format('%s-%s', parts[0].toLowerCase(), parts[2].toUpperCase());\n  } else {\n    logger.error(\n      util.format(\"Unable to map a language from locale code [%s]\", locale));\n    return locale;\n  }\n};\n\n/**\n * Given a language code, return a normalized language code.\n * @param  {String} language A language code. For example, 'en-us'.\n * @return {String}          A normalized language code, such as 'en-US'.\n */\nexports.normalizeLanguage = normalizeLanguage = function (language) {\n  return languageFrom(localeFrom(language));\n};\n\n/**\n * Given a locale code, return a normalized locale code.\n * @param  {String} locale A locale code. For example, 'en_us'.\n * @return {String}        A normalized locale code, such as 'en_US'.\n */\nexports.normalizeLocale = normalizeLocale = function (locale) {\n  return localeFrom(languageFrom(locale));\n};\n\n/**\n * format provides string interpolation on the client and server side.\n * It can be used with either an object for named variables, or an array\n * of values for positional replacement.\n *\n * Named Example:\n * format(\"%(salutation)s %(place)s\", {salutation: \"Hello\", place: \"World\"}, true);\n * Positional Example:\n * format(\"%s %s\", [\"Hello\", \"World\"]);\n */\nexports.format = format = function(fmt, obj, named) {\n  if (!fmt) return \"\";\n  if (Array.isArray(obj) || named === false) {\n    return fmt.replace(/%s/g, function(){return String(obj.shift());});\n  } else if (typeof obj === 'object' || named === true) {\n    return fmt.replace(/%\\(\\s*([^)]+)\\s*\\)s/g, function(m, v){\n      return String(obj[v.trim()]);\n    });\n  } else {\n    return fmt;\n  }\n};\n\n/**\n * Returns the list of translations abide is currently configured to support.\n */\nexports.getLocales = function() {\n  return Object.keys(translations);\n};\n","/home/travis/build/npmtest/node-npmtest-i18n-abide/node_modules/i18n-abide/bin/check-l10n-config.js":"var fs = require('fs'),\n    i18n = require('../lib/i18n'),\n    path = require('path'),\n    util = require('util');\n\nif (! process.env['CONFIG_FILES']) {\n  console.error(\"You must set CONFIG_FILES to point to the json file you want to check\");\n  process.exit(1);\n}\n\nvar config = require('../lib/configuration.js'),\n    error = 0,\n    logged = false;\n\nconsole.log(\"Checking \", config.get('supported_languages').length, \"languages from \", process.env['CONFIG_FILES']);\n\nconfig.get('supported_languages').forEach(function (lang, i) {\n  var locale = i18n.localeFrom(lang);\n  if (i18n.languageFrom(locale) !== lang) {\n    console.error(\"Hmmm language=\", lang, \"seems fishy! Converts to locale=\",\n      locale, \" and back again into language=\", i18n.languageFrom(locale));\n    error = 1;\n  }\n  fs.exists(path.join(__dirname, '..', 'locale', locale, 'LC_MESSAGES', 'messages.po'), function (m_exists) {\n    if (! m_exists) {\n      console.error(\"Language \", lang, \" doesn't exist. Expected\",\n        path.join(__dirname, '..', 'locale', locale, 'LC_MESSAGES', 'messages.po'));\n      error = 1;\n    }\n  });\n});\n\nprocess.on('exit', function () {\n  // This will run twice...\n  if (! logged) {\n    logged = true;\n    if (error === 0) {\n      console.log(\"OK\");\n    } else {\n      console.log(\"FAIL\");\n    }\n  }\n  process.exit(error);\n});","/home/travis/build/npmtest/node-npmtest-i18n-abide/node_modules/i18n-abide/bin/every-locale.js":"var fs = require('fs'),\n    i18n = require('../lib/i18n'),\n    path = require('path'),\n    util = require('util');\n\nvar allLocales = [],\n    localeDir = path.join(__dirname, '..', 'locale');\n\nfs.readdir(localeDir, function (err, files) {\n  files.forEach(function (file, i) {\n    fs.exists(path.join(localeDir, file, 'LC_MESSAGES', 'client.po'), function (c_exists) {\n      if (c_exists) {\n        fs.exists(path.join(localeDir, file, 'LC_MESSAGES', 'messages.po'), function (m_exists) {\n          if (m_exists) {\n            allLocales.push(i18n.languageFrom(file));\n          } else {\n            console.error(util.format('%s client.po exists, but not messages.po', file));\n          }\n        });\n      }\n    });\n  });\n});\n\nprocess.on('exit', function () {\n  allLocales.sort();\n  console.log(JSON.stringify(allLocales).replace(/,\"/g, ', \"'));\n});","/home/travis/build/npmtest/node-npmtest-i18n-abide/node_modules/i18n-abide/bin/po2json.js":"#!/usr/bin/env node\n/*\n * PO parser from http://jsgettext.berlios.de/lib/Gettext.js\n * adapted for Node.js and modified to be more like po2json.pl\n * - Zach Carter <zcarter@cse.usf.edu>\n * */\n\n/*\n * Pure Javascript implementation of Uniforum message translation.\n * Copyright (C) 2008 Joshua I. Miller <unrtst@cpan.org>, all rights reserved\n * \n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Library General Public License as published\n * by the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n * \n * You should have received a copy of the GNU Library General Public\n * License along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n * USA.\n * */\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar argv = process.argv;\nvar pretty = ~argv.indexOf('-p');\n\nfunction parse (file) {\n  fs.readFile(fs.realpathSync(file), 'utf8', function (err, data) {\n    if (err) throw err;\n    if (pretty) {\n      var result = {};\n      result[path.basename(file, '.po')] = parse_po(data);\n      // perl JSON encoder uses three spaces (╯°□°）╯︵ ┻━┻\n      console.log(JSON.stringify(result, null, '   '));\n    } else {\n      console.log(JSON.stringify(parse_po(data)));\n    }\n  });\n}\n\nvar context_glue = \"\\004\";\n\nvar parse_po = function(data) {\n  var rv = {};\n  var buffer = {};\n  var lastbuffer = \"\";\n  var errors = [];\n  var lines = data.split(\"\\n\");\n  for (var i=0; i<lines.length; i++) {\n    // chomp\n    lines[i] = lines[i].replace(/(\\n|\\r)+$/, '');\n\n    var match;\n\n    // Empty line / End of an entry.\n    if (/^$/.test(lines[i])) {\n      if (typeof(buffer['msgid']) != 'undefined') {\n        var msg_ctxt_id = (typeof(buffer['msgctxt']) != 'undefined' &&\n                          buffer['msgctxt'].length) ?\n                            buffer['msgctxt']+context_glue+buffer['msgid'] :\n                            buffer['msgid'];\n        var msgid_plural = (typeof(buffer['msgid_plural']) != 'undefined' &&\n                            buffer['msgid_plural'].length) ?\n                              buffer['msgid_plural'] :\n                              null;\n\n        // find msgstr_* translations and push them on\n        var trans = [];\n        for (var str in buffer) {\n          var match;\n          if (match = str.match(/^msgstr_(\\d+)/))\n            trans[parseInt(match[1])] = buffer[str];\n        }\n        trans.unshift(msgid_plural);\n\n        // only add it if we've got a translation\n        // NOTE: this doesn't conform to msgfmt specs\n        if (trans.length > 1) rv[msg_ctxt_id] = trans;\n\n        buffer = {};\n        lastbuffer = \"\";\n      }\n\n    // comments\n    } else if (/^(#|#$)/.test(lines[i])) {\n      continue;\n\n    // msgctxt\n    } else if (match = lines[i].match(/^(?:#~ )?msgctxt\\s+(.*)/)) {\n      lastbuffer = 'msgctxt';\n      buffer[lastbuffer] = parse_po_dequote(match[1]);\n\n    // msgid\n    } else if (match = lines[i].match(/^(?:#~ )?msgid\\s+(.*)/)) {\n      lastbuffer = 'msgid';\n      buffer[lastbuffer] = parse_po_dequote(match[1]);\n\n    // msgid_plural\n    } else if (match = lines[i].match(/^(?:#~ )?msgid_plural\\s+(.*)/)) {\n      lastbuffer = 'msgid_plural';\n      buffer[lastbuffer] = parse_po_dequote(match[1]);\n\n    // msgstr\n    } else if (match = lines[i].match(/^(?:#~ )?msgstr\\s+(.*)/)) {\n      lastbuffer = 'msgstr_0';\n      buffer[lastbuffer] = parse_po_dequote(match[1]);\n\n    // msgstr[0] (treak like msgstr)\n    } else if (match = lines[i].match(/^(?:#~ )?msgstr\\[0\\]\\s+(.*)/)) {\n      lastbuffer = 'msgstr_0';\n      buffer[lastbuffer] = parse_po_dequote(match[1]);\n\n    // msgstr[n]\n    } else if (match = lines[i].match(/^(?:#~ )?msgstr\\[(\\d+)\\]\\s+(.*)/)) {\n      lastbuffer = 'msgstr_'+match[1];\n      buffer[lastbuffer] = parse_po_dequote(match[2]);\n\n    // continued string\n    } else if (/^(?:#~ )?\"/.test(lines[i])) {\n      buffer[lastbuffer] += parse_po_dequote(lines[i]);\n\n    // something strange\n    } else {\n      errors.push(\"Strange line [\"+i+\"] : \"+lines[i]);\n    }\n  }\n\n\n  // handle the final entry\n  if (typeof(buffer['msgid']) != 'undefined') {\n    var msg_ctxt_id = (typeof(buffer['msgctxt']) != 'undefined' &&\n                      buffer['msgctxt'].length) ?\n                        buffer['msgctxt']+context_glue+buffer['msgid'] :\n                        buffer['msgid'];\n    var msgid_plural = (typeof(buffer['msgid_plural']) != 'undefined' &&\n                       buffer['msgid_plural'].length) ?\n                         buffer['msgid_plural'] :\n                         null;\n\n    // find msgstr_* translations and push them on\n    var trans = [];\n    for (var str in buffer) {\n      var match;\n      if (match = str.match(/^msgstr_(\\d+)/))\n        trans[parseInt(match[1])] = buffer[str];\n    }\n    trans.unshift(msgid_plural);\n\n    // only add it if we've got a translation\n    // NOTE: this doesn't conform to msgfmt specs\n    if (trans.length > 1) rv[msg_ctxt_id] = trans;\n\n    buffer = {};\n    lastbuffer = \"\";\n  }\n\n\n  // parse out the header\n  if (rv[\"\"] && rv[\"\"][1]) {\n    var cur = {};\n    var hlines = rv[\"\"][1].split(/\\\\n/);\n    for (var i=0; i<hlines.length; i++) {\n      if (! hlines[i].length) continue;\n\n      var pos = hlines[i].indexOf(':', 0);\n      if (pos != -1) {\n        var key = hlines[i].substring(0, pos);\n        var val = hlines[i].substring(pos +1);\n\n        if (cur[key] && cur[key].length) {\n          errors.push(\"SKIPPING DUPLICATE HEADER LINE: \"+hlines[i]);\n        } else if (/#-#-#-#-#/.test(key)) {\n          errors.push(\"SKIPPING ERROR MARKER IN HEADER: \"+hlines[i]);\n        } else {\n          // remove begining spaces if any (the perl script keeps them)\n          //val = val.replace(/^\\s+/, '');\n          cur[key] = val;\n        }\n\n      } else {\n        errors.push(\"PROBLEM LINE IN HEADER: \"+hlines[i]);\n        cur[hlines[i]] = '';\n      }\n    }\n\n    // replace header string with assoc array\n    rv[\"\"] = cur;\n  } else {\n    rv[\"\"] = {};\n  }\n\n  // TODO: XXX: if there are errors parsing, what do we want to do?\n  // GNU Gettext silently ignores errors. So will we.\n  // alert( \"Errors parsing po file:\\n\" + errors.join(\"\\n\") );\n  if (errors.length) console.warn(errors.join(\"\\n\"));\n\n  return rv;\n};\n\n\nvar parse_po_dequote = function(str) {\n  var match;\n  if (match = str.match(/^\"(.*)\"/)) {\n    str = match[1];\n  }\n  str = str.replace(/\\\\\"/g, '\"')\n           .replace(/\\\\n/g, '\\n');\n  return str;\n};\n\nif (argv.indexOf('-h') >= 0 || argv.length < 3) {\n  console.log(path.basename(argv[1])+\" {-p} {file.po} > {outputfile.json}\\n    -p  : do pretty-printing of json data\\n\");\n} else {\n  parse(argv[argv[2] === '-p' ? 3:2]);\n}\n","/home/travis/build/npmtest/node-npmtest-i18n-abide/node_modules/i18n-abide/static/gettext.js":"/*globals json_locale_data: true */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n(function() {\n  \"use strict\";\n\n  function Gettext(params) {\n      return {\n        gettext: function (msgid) {\n          if (json_locale_data && json_locale_data[\"client\"]) {\n          var dict = json_locale_data[\"client\"];\n            if (dict[msgid] && dict[msgid].length >= 2 &&\n                dict[msgid][1].trim() != \"\") {\n              return dict[msgid][1];\n            }\n        }\n        return msgid;\n        },\n        // See lib/i18n.js format docs\n        format: function (fmt, obj, named) {\n          if (! fmt) return \"\";\n          if (! fmt.replace) {\n            return fmt;\n          }\n          if (named) {\n            return fmt.replace(/%\\(\\w+\\)s/g, function(match){return String(obj[match.slice(2,-2)])});\n          } else {\n            return fmt.replace(/%s/g, function(match){return String(obj.shift())});\n          }\n        }\n      };\n  };\n\n  var params = {\n        \"domain\" : \"client\",\n        \"locale_data\" : json_locale_data\n  };\n  var gt = new Gettext(params);\n  window.gettext = gt.gettext.bind(gt);\n  window.format = gt.format.bind(gt);\n\n}());\n"}